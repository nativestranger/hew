var DateTimePicker;

DateTimePicker = (function() {
  function DateTimePicker() {}

  DateTimePicker.prototype.formattingDefaults = {
    dateFormat: {
      format: 'YYYY-MM-DD',
      view: 'M/D/YYYY'
    }
  };

  DateTimePicker.prototype.set_date = function(sel, date) {
    var format, thisObj;
    thisObj = this;
    if (sel.hasClass("date")) {
      format = 'M/D/YYYY';
    } else if (sel.hasClass("time")) {
      format = 'h:mm A';
    } else if (sel.hasClass("datetime_local")) {
      format = 'M/D/YYYY h:mm A';
    }
    return sel.val(moment(date).format(format));
  };

  DateTimePicker.prototype.time_convert = function(time, from, to) {
    if (time) {
      if (!moment(time, to, true).isValid()) {
        return moment(time, from).format(to);
      } else {
        return time;
      }
    } else {
      return '';
    }
  };

  DateTimePicker.prototype.view_formatter = function($obj, format, view) {
    var thisObj;
    thisObj = this;
    return $obj.each(function() {
      var field;
      field = $(this);
      field.val(thisObj.time_convert(field.val(), format, view));
      return $(this).closest('form').on('submit', function() {
        return field.val(thisObj.time_convert(field.val(), view, format));
      });
    });
  };

  DateTimePicker.prototype.formatDateType = function(value, viewFormat) {
    var format, view;
    format = this.formattingDefaults.dateFormat.format;
    view = this.formattingDefaults.dateFormat.view;
    if (viewFormat) {
      return this.time_convert(value, format, view);
    } else {
      return this.time_convert(value, view, format);
    }
  };

  DateTimePicker.prototype.do_default_input_changes = function(sel, format, view) {
    this.view_formatter(sel, format, view);
    sel.attr("autocomplete", "off");
    return sel.each(function() {
      var default_current_date, default_date_or_time, keepOpen;
      default_current_date = $(this).data("default-current-date");
      default_date_or_time = $(this).data("default");
      keepOpen = $(this).data("keep-open") != null ? $(this).data("keep-open") : true;
      $(this).datetimepicker({
        format: view,
        keepOpen: keepOpen,
        useCurrent: default_current_date,
        defaultDate: default_date_or_time,
        buttons: {
          showToday: true,
          showClear: true
        },
        icons: {
          time: 'fa fa-clock-o',
          date: 'fa fa-calendar',
          up: 'fa fa-arrow-up',
          down: 'fa fa-arrow-down',
          previous: 'fa fa-arrow-left',
          next: 'fa fa-arrow-right',
          today: 'fa fa-calendar-o',
          clear: 'fa fa-times-circle'
        }
      });
      $(this).click(function() {
        $(this).datetimepicker('show');
      });
      $(this).focus(function() {
        $(this).datetimepicker('show');
      });
      return $(this).blur(function() {
        $(this).datetimepicker('hide');
      });
    });
  };

  DateTimePicker.prototype.addDateEvents = function() {
    var format, sel, view;
    format = 'YYYY-MM-DD';
    view = 'M/D/YYYY';
    sel = $("input.date");
    this.do_default_input_changes(sel, format, view);
    format = 'HH:mm:ss.SSS';
    view = 'h:mm A';
    sel = $("input.time");
    this.do_default_input_changes(sel, format, view);
    format = 'YYYY-MM-DDTHH:mm';
    view = 'M/D/YYYY h:mm A';
    sel = $("input.datetime_local");
    return this.do_default_input_changes(sel, format, view);
  };

  DateTimePicker.prototype.disableHtml5 = function() {
    $('input[type="date"]').attr('type', 'text');
    $('input[type="time"]').attr('type', 'text');
    return $('input[type="datetime-local"]').attr('type', 'text');
  };

  return DateTimePicker;

})();

document.addEventListener("turbolinks:load", function() {
  window.dateTimePicker = new DateTimePicker();
  dateTimePicker.disableHtml5();
  return dateTimePicker.addDateEvents();
});

// ---
// generated by coffee-script 1.9.2
